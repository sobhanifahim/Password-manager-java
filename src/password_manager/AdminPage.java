/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author Sobhani
 */
public class AdminPage extends javax.swing.JFrame {
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/password_manager"; // Database URL - Specifies the location and details of the MySQL database
    private static final String USERNAME = "root"; // Database username - The username used to authenticate and connect to the database
    private static final String PASSWORD = "08420";
    
    private static Connection connection;
    
    private final int adminId;
    /**
     * Creates new form AdminPage
     */
    public AdminPage(int adminId) {
        initComponents();
        connectToDatabase();
        displayUser();
        this.adminId = adminId;
    }

    private AdminPage() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
     
     private void connectToDatabase() {
        try {
            // Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish the connection
            connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
            System.out.println("Connected to the database!");

        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(492, 733));

        jPanel2.setBackground(new java.awt.Color(51, 51, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Admin View for All User");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 12, 0, 113);
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/rsz_user.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.ipady = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 38, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        jTable1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "User Id", "User", "Phone Number", "Show", "Delete"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(51, 51, 255));
        jTable1.setRowHeight(50);
        jTable1.setSelectionBackground(new java.awt.Color(51, 51, 51));
        jTable1.setShowGrid(true);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Phone Number :");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(37, 6, 0, 0);
        jPanel3.add(jLabel2, gridBagConstraints);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 163;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 12, 0, 0);
        jPanel3.add(jTextField1, gridBagConstraints);

        jButton2.setText("Search");
        jButton2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 2, true));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 37;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(32, 12, 0, 35);
        jPanel3.add(jButton2, gridBagConstraints);

        jButton1.setText("log out");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 153), 2, true));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.ipady = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(26, 12, 0, 0);
        jPanel3.add(jButton1, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    String searchPhoneNumber = jTextField1.getText();
    if (searchPhoneNumber.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Error: Please enter an Phone number to search", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    searchAndMoveRowToTop(searchPhoneNumber);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        MainAppUI mui= new MainAppUI();
        mui.show();
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
private void searchAndMoveRowToTop(String searchAppName) {
    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

    for (int i = 0; i < tableModel.getRowCount(); i++) {
        String appName = (String) tableModel.getValueAt(i, 2); // Assuming app name is in the second column

        if (appName.equals(searchAppName)) {
            // Found the app name, move the row to the top
            Object[] rowData = new Object[tableModel.getColumnCount()];
            for (int j = 0; j < tableModel.getColumnCount(); j++) {
                rowData[j] = tableModel.getValueAt(i, j);
            }
            tableModel.removeRow(i);
            tableModel.insertRow(0, rowData);

            // Optional: Select the moved row
            jTable1.setRowSelectionInterval(0, 0);

            return; // Stop searching after the first occurrence
        }
    }

    JOptionPane.showMessageDialog(this, "Error: User not found in the table", "Input Error", JOptionPane.ERROR_MESSAGE);
}  
    
private void displayUser() {
    try {
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);

        // Set custom renderer and editor for button columns outside the loop
        TableColumn editColumn = jTable1.getColumn("Show");
        editColumn.setCellRenderer(new ButtonRenderer());
        editColumn.setCellEditor(new ButtonEditor(new JCheckBox()));
        
        TableColumn deleteColumn = jTable1.getColumn("Delete");
        deleteColumn.setCellRenderer(new ButtonRenderer());
        deleteColumn.setCellEditor(new ButtonEditor(new JCheckBox()));

        // Use the userId directly as it's a member variable
        String query = "SELECT * FROM userprofile";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    int userId = resultSet.getInt("uid");
                    String first_name = resultSet.getString("first_name");
                    String middle_name = resultSet.getString("middle_name");
                    String last_name= resultSet.getString("last_name");
                    String phone_number= resultSet.getString("phone_number");
                    
                    // Create buttons with custom renderer and editor
                    JButton showButton = new JButton("Show");
                    JButton deleteButton = new JButton("Delete");

                    // Set the button names
                    showButton.setText("Show");
                    deleteButton.setText("Delete");
                    int rowIndex = tableModel.getRowCount();
                    // Add action listeners for the buttons
                    showButton.addActionListener(e -> handleButtonClicked("Show", jTable1.getSelectedRow()));
                    deleteButton.addActionListener(e -> handleButtonClicked("Delete", jTable1.getSelectedRow()));
                    

                    // Set custom renderer and editor for button columns
                    ButtonEditor showButtonEditor = new ButtonEditor(new JCheckBox());
                    showButtonEditor.setButtonType("Show");
                    showButtonEditor.setSelectedRow(rowIndex); // Set the selected row
                    jTable1.getColumn("Show").setCellRenderer(new ButtonRenderer());
                    jTable1.getColumn("Show").setCellEditor(showButtonEditor);
                    
                    
                    ButtonEditor deleteButtonEditor = new ButtonEditor(new JCheckBox());
                    deleteButtonEditor.setButtonType("Delete");
                    jTable1.getColumn("Delete").setCellRenderer(new ButtonRenderer());
                    jTable1.getColumn("Delete").setCellEditor(deleteButtonEditor);


                    Object[] row = new Object[]{userId,(first_name+" "+middle_name+" "+last_name), phone_number, showButton};
                    tableModel.addRow(row);
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
          if (column == 3) {
            setBackground(new Color(135, 206, 250));
            jTable1.repaint();
            setText("Show"); 
        }
          else if (column == 4) { 
            setBackground(new Color(255, 99, 71));
            jTable1.repaint();
            setText("Delete");
        }

        return this;
           
        }
        
    }

    // Custom button editor
public class ButtonEditor extends DefaultCellEditor {
    private JButton button;
    private String buttonType;
    private int selectedRow;

    public ButtonEditor(JCheckBox checkBox) {
        super(checkBox);
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Handle button click (edit)
                fireEditingStopped();
                handleButtonClicked(buttonType, selectedRow);
            }
        });
    }

    public void setButtonType(String buttonType) {
        this.buttonType = buttonType;
    }

    public void setSelectedRow(int selectedRow) {
        this.selectedRow = selectedRow;
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        setSelectedRow(row);
        button.setText(buttonType);
        return button;
    }
}

private void handleButtonClicked(String buttonType, int row) {
    switch (buttonType) {
        case "Show":
            // Handle edit button click
            int selectedRow = jTable1.convertRowIndexToModel(row);
            int userId = (int) jTable1.getModel().getValueAt(selectedRow, 0); // Assuming userId is in the first column
            handleShowButton(userId);
           
            break;
        case "Delete":
            // Handle delete button click
            int selectedRowdel = jTable1.convertRowIndexToModel(row);
            int userIdentity = (int) jTable1.getModel().getValueAt(selectedRowdel, 0); 
            handleDeleteButton(userIdentity);
            break;

        default:
            // Handle other button types if needed
            break;
    }
}

    private void handleDeleteButton(int userId) {
          int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this user?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

    if (confirmation == JOptionPane.YES_OPTION) {
        try {
            // Create SQL query to delete the user with the specified userId
            String query = "DELETE FROM userprofile WHERE uid = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                // Set the userId parameter in the prepared statement
                preparedStatement.setInt(1, userId);

                // Execute the delete query
                int affectedRows = preparedStatement.executeUpdate();

                if (affectedRows > 0) {
                    // If deletion is successful, display a success message
                    JOptionPane.showMessageDialog(null, "User deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);

                    // Refresh the table to reflect the changes
                    displayUser();
                } else {
                    // If no rows were affected, deletion failed
                    JOptionPane.showMessageDialog(null, "Error: Failed to delete user.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace(); // Handle any SQL exceptions that may occur
        }
    }
    }
    private void handleShowButton(int userId) {
     navigateToAnotherPage(userId);
    
    }
private void navigateToAnotherPage(int userId) {
    // Replace 'AnotherPageClass' with the actual class for the other page

    Adminpanel adminpanel = new Adminpanel(userId);
    adminpanel.setVisible(true);
    adminpanel.show();
    
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
