import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.table.DefaultTableModel;
import java.security.SecureRandom;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Sobhani
 */
public class Adminpanel extends javax.swing.JFrame {
    private static final String JDBC_URL = "jdbc:mysql://localhost:3306/password_manager"; // Database URL - Specifies the location and details of the MySQL database
    private static final String USERNAME = "root"; // Database username - The username used to authenticate and connect to the database
    private static final String PASSWORD = "08420";
    
    private static Connection connection;
    /**
     * Creates new form Adminpanel
     */
    
    public int userId;
    public Adminpanel(int userId) {
        initComponents();
        connectToDatabase();
        this.userId = userId;
        displayUserPasswords(userId);
    }

    private Adminpanel() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
    
     private void connectToDatabase() {
        try {
            // Load the JDBC driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // Establish the connection
            connection = DriverManager.getConnection(JDBC_URL, USERNAME, PASSWORD);
            System.out.println("Connected to the database!");

        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(51, 51, 255));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Admin Panel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(23, 39, 0, 232);
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/rsz_1admin_password.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.ipadx = 12;
        gridBagConstraints.ipady = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 120, 6, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Password Type", "Application Name", "User Name", "Password", "Edit", "Delete"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(0, 102, 102));
        jTable1.setRowHeight(50);
        jTable1.setSelectionBackground(new java.awt.Color(51, 51, 51));
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("App Name :");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("Find");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 153, 153), 2, true));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 33;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(22, 55, 24, 56);
        jPanel4.add(jPanel5, gridBagConstraints);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    String searchAppName = jTextField1.getText();
    if (searchAppName.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Error: Please enter a phone number name to search", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Custom method to search and move row to the top
    searchAndMoveRowToTop(searchAppName);

          
    }//GEN-LAST:event_jButton1ActionPerformed
    private void searchAndMoveRowToTop(String searchAppName) {
    DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

    for (int i = 0; i < tableModel.getRowCount(); i++) {
        String appName = (String) tableModel.getValueAt(i, 1); // Assuming app name is in the second column

        if (appName.equals(searchAppName)) {
            // Found the app name, move the row to the top
            Object[] rowData = new Object[tableModel.getColumnCount()];
            for (int j = 0; j < tableModel.getColumnCount(); j++) {
                rowData[j] = tableModel.getValueAt(i, j);
            }
            tableModel.removeRow(i);
            tableModel.insertRow(0, rowData);

            // Optional: Select the moved row
            jTable1.setRowSelectionInterval(0, 0);

            return; // Stop searching after the first occurrence
        }
    }

    JOptionPane.showMessageDialog(this, "Error: Phone Number not found in the table", "Input Error", JOptionPane.ERROR_MESSAGE);
}
    private void updatePasswordInDatabase(int rowIndex, String newPassword) {
    try {
        
        String updateQuery = "UPDATE userpassword SET password_user = ? WHERE uid = ? AND ptype = ? AND appname = ?";
        try (PreparedStatement updateStatement = connection.prepareStatement(updateQuery)) {
            updateStatement.setString(1, newPassword);
            updateStatement.setInt(2, userId);
            updateStatement.setString(3, (String) jTable1.getValueAt(rowIndex, 0)); // ptype
            updateStatement.setString(4, (String) jTable1.getValueAt(rowIndex, 1)); // appname

            int rowsAffected = updateStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Success: Password updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Error: Failed to update password", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}
    
private void displayUserPasswords(int userId) {
    try {
        System.out.println(userId);
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);

        // Set custom renderer and editor for button columns outside the loop
        TableColumn editColumn = jTable1.getColumn("Edit");
        editColumn.setCellRenderer(new ButtonRenderer());
        editColumn.setCellEditor(new ButtonEditor(new JCheckBox()));

        TableColumn deleteColumn = jTable1.getColumn("Delete");
        deleteColumn.setCellRenderer(new ButtonRenderer());
        deleteColumn.setCellEditor(new ButtonEditor(new JCheckBox()));

        // Use the userId directly as it's a member variable
        String query = "SELECT ptype, appname,puser_name, password_user FROM userpassword WHERE uid = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, userId);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    String passwordType = resultSet.getString("ptype");
                    String appName = resultSet.getString("appname");
                    String userName= resultSet.getString("puser_name");
                    String password = resultSet.getString("password_user");

                    // Create buttons with custom renderer and editor
                    JButton editButton = new JButton("Edit");
                    JButton deleteButton = new JButton("Delete");

                    // Set the button names
                    editButton.setText("Edit");
                    deleteButton.setText("Delete");
                    int rowIndex = tableModel.getRowCount();
                    // Add action listeners for the buttons
                    editButton.addActionListener(e -> handleButtonClicked("Edit", jTable1.getSelectedRow()));
                    deleteButton.addActionListener(e -> handleButtonClicked("Delete", jTable1.getSelectedRow()));

                    // Set custom renderer and editor for button columns
                    ButtonEditor editButtonEditor = new ButtonEditor(new JCheckBox());
                    editButtonEditor.setButtonType("Edit");
                    editButtonEditor.setSelectedRow(rowIndex); // Set the selected row
                    jTable1.getColumn("Edit").setCellRenderer(new ButtonRenderer());
                    jTable1.getColumn("Edit").setCellEditor(editButtonEditor);

                    ButtonEditor deleteButtonEditor = new ButtonEditor(new JCheckBox());
                    deleteButtonEditor.setButtonType("Delete");
                    jTable1.getColumn("Delete").setCellRenderer(new ButtonRenderer());
                    jTable1.getColumn("Delete").setCellEditor(deleteButtonEditor);

                    Object[] row = new Object[]{passwordType, appName,userName, password, editButton, deleteButton};
                    tableModel.addRow(row);
                }
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }
}

private class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
          if (column == 4) {
            setBackground(new Color(135, 206, 250));
            jTable1.repaint();
            setText("Edit"); 
        } else if (column == 5) { 
            setBackground(new Color(255, 99, 71));
            jTable1.repaint();
            setText("Delete");
        }

        return this;
           
        }
        
    }

    // Custom button editor
public class ButtonEditor extends DefaultCellEditor {
    private JButton button;
    private String buttonType;
    private int selectedRow;

    public ButtonEditor(JCheckBox checkBox) {
        super(checkBox);
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Handle button click (edit)
                fireEditingStopped();
                handleButtonClicked(buttonType, selectedRow);
            }
        });
    }

    public void setButtonType(String buttonType) {
        this.buttonType = buttonType;
    }

    public void setSelectedRow(int selectedRow) {
        this.selectedRow = selectedRow;
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        setSelectedRow(row);
        button.setText(buttonType);
        return button;
    }
}

private void handleButtonClicked(String buttonType, int selectedRow) {
    switch (buttonType) {
        case "Edit":
            // Handle edit button click
            
            handleEditButton(selectedRow);
            break;
        case "Delete":
            // Handle delete button click
           
            handleDeleteButton(selectedRow);
            break;
        default:
            // Handle other button types if needed
            break;
    }
}


    private void handleEditButton(int rowIndex) {
    String newPassword = (String) jTable1.getValueAt(rowIndex, 3); // Assuming the password column is at index 2

    // Update the password in the database
    updatePasswordInDatabase(rowIndex, newPassword);
    }
   private void handleDeleteButton(int rowIndex) {
    try {
        String passwordType = (String) jTable1.getValueAt(rowIndex, 0);
        String appName = (String) jTable1.getValueAt(rowIndex, 1);

        // Delete the password from the database
        String deleteQuery = "DELETE FROM userpassword WHERE uid = ? AND ptype = ? AND appname = ?";
        try (PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery)) {
            deleteStatement.setInt(1, userId);
            deleteStatement.setString(2, passwordType);
            deleteStatement.setString(3, appName);

            int rowsAffected = deleteStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Success: Password deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                displayUserPasswords(userId); // Refresh the table after deletion
            } else {
                 JOptionPane.showMessageDialog(this, "Error: Failed to delete password", "Input Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException e) {
        // Handle the exception more gracefully in a production environment
        e.printStackTrace();
    }
}



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Adminpanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Adminpanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Adminpanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Adminpanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Adminpanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
